#!/usr/bin/env nodes

const dotenv = require('dotenv')

const envFromRealEnvironment = process.env.NODE_ENV || 'development'
const path = `.env.${envFromRealEnvironment}`

// console.log(path, envFromRealEnvironment)

dotenv.config({path, silent: envFromRealEnvironment === 'production'})

function normalizePort (val) {
    const prt = parseInt(val, 10)

    if (isNaN(prt)) {
        // named pipe
        return val
    }

    if (prt >= 0) {
        // port number
        return prt
    }

    return false
}

const app = require('../app.js')
const debug = require('debug')('express:server') // eslint-disable-line
const http = require('http')

const port = normalizePort(process.env.PORT || '3000')

app.set('port', port)

const server = http.createServer(app)

function onError (error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind}  requires elevated privileges`)
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(`${bind}  is already in use`)
            process.exit(1)
            break
        default:
            throw error
    }
}

function onListening () {
    const addr = server.address()
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`
    debug(`Listening on  ${bind}`)
    console.log(`App listening on port ${bind}`) // eslint-disable-line
}

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)
